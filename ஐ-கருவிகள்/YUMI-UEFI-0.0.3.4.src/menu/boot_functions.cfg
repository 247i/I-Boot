# Boot Functions file created for use with YUMI 

#insmod regexp
# get just the name of the ISO file
function _isoname {
  regexp --set=isoname "${dir}/(.*)" "${isofile}"
 export isoname
}

# What to do with the ISO file

function _label {
  probe --set=looplabel -q --label (${loop});
fi
}

function _config {
# Priority - Catch All Configs
if ${looplabel} = "Avira*"; then
	_vmlinuz;
    _initrd;
elif ${looplabel} = "*orteu*"; then
    syslinux_configfile (${loop})/boot/syslinux/porteus.cfg;
elif ${looplabel} = "EASEUS_DC"; then
    syslinux_configfile -i (${loop})/isolinux/isolinux.cfg;    
elif [ -e (${loop})/boot/grub/loopback.cfg ]; then
    configfile (${loop})/boot/grub/loopback.cfg;
elif [ -e (${loop})/boot/grub/grub.cfg ]; then
	configfile (${loop})/boot/grub/grub.cfg;
elif [ -e (${loop})/BOOT/GRUB/GRUBSRCD.cfg ]; then
	configfile (${loop})/BOOT/GRUB/GRUBSRCD.cfg;	
elif [ -e (${loop})/grub/grub.cfg ]; then
	configfile (${loop})/grub/grub.cfg;
elif [ -e (${loop})/EFI/BOOT/grub.cfg ]; then
	configfile (${loop})/EFI/BOOT/grub.cfg;
elif [ -e (${loop})/EFI/debian/grub/grub.cfg ]; then
	configfile (${loop})/EFI/debian/grub/grub.cfg;	
elif [ -e (${loop})/isolinux.cfg ]; then
	syslinux_configfile -i (${loop})/isolinux.cfg;	 
elif [ -e (${loop})/isolinux/isolinux.cfg ]; then
	syslinux_configfile -i (${loop})/isolinux/isolinux.cfg;	    
elif [ -e (${loop})/isolinux/live.cfg ]; then
	syslinux_configfile -i (${loop})/isolinux/live.cfg;
elif [ -e (${loop})/boot/isolinux/isolinux.cfg ]; then
	syslinux_configfile (${loop})/boot/isolinux/isolinux.cfg;
elif [ -e (${loop})/boot/isolinux/syslinux.cfg ]; then
	syslinux_configfile (${loop})/boot/syslinux/isolinux.cfg;	
elif [ -e (${loop})/boot/syslinux/syslinux.cfg ]; then
	syslinux_configfile (${loop})/boot/syslinux/syslinux.cfg;	
elif [ -e (${loop})/boot/syslinux/porteus.cfg ]; then
	syslinux_configfile (${loop})/boot/syslinux/porteus.cfg;	  
elif [ -e (${loop})/slax/boot/syslinux.cfg ]; then
	syslinux_configfile (${loop})/slax/boot/syslinux.cfg;
elif [ -e (${loop})/system/isolinux/isolinux.cfg ]; then
	syslinux_configfile (${loop})/system/isolinux/isolinux.cfg;	
elif ${looplabel} = "*orteu*"; then
    syslinux_configfile (${loop})/boot/syslinux/porteus.cfg;
elif ${looplabel} = "EASEUS_DC"; then
    syslinux_configfile -i (${loop})/isolinux/isolinux.cfg;
else	  
# Else try directly allocated linux/initrd 
	_vmlinuz;
    _initrd;
fi	
}

# Loading the Kernel
function _vmlinuz {
# Ubuntu Based
     if [ -e (${loop})/casper/vmlinu* ]; then
      for vmlinuz in (${loop})/casper/vmlinu*; do set vmlinuz; done
      linux ${vmlinuz} fsck.mode=skip boot=casper noprompt noeject $persist	
# Debian Live Based
     elif [ -e (${loop})/live/vmlinu* ]; then
      for vmlinuz in (${loop})/live/vmlinu*; do set vmlinuz; done
      linux ${vmlinuz} boot=live noprompt noeject floppy.allowed_drive_mask=0 ignore_uuid		  
# Puppy Based
     elif [ -e (${loop})/vmlinuz ]; then
      linux (${loop})/vmlinuz pfix=fsck pmedia=cd iso-scan/filename=$isopath		
# System rescue
     elif [ -e (${loop})/isolinux/rescue64 ]; then
      linux (${loop})/isolinux/rescue64 isoloop=$isopath docache
     elif [ -e (${loop})/boot/grub/grubsrcd.cfg ]; then	 
	  configfile (${loop})/boot/grub/grubsrcd.cfg
# CentOS Based	  
	 elif [ -e (${loop})/isolinux/vmlinuz ]; then
	 linux (${loop})/isolinux/vmlinuz
# EASUS	  
	 elif [ -e (${loop})/bzImage ]; then
	 linux (${loop})/bzImage       
	 fi											 
}

# Loading the Initial Ram Filesystem
function _initrd {
# Ubuntu Based
     if [ -e (${loop})/casper/init* ]; then
	  for initrd in (${loop})/casper/init*; do set initrd; done
      initrd ${initrd};	
     elif [ -e (${loop})/boot/grub/initrd.xz ]; then
         initrd (${loop})/boot/grub/initrd.xz;
     elif [ -e (${loop})/initrd.gz ]; then
         initrd (${loop})/initrd.gz;
     elif [ -e (${loop})/initrd.lz ]; then
         initrd (${loop})/initrd.lz;	
     elif [ -e (${loop})/initrd ]; then
         initrd (${loop})/initrd;		 
# Debian Live Based	
     elif [ -e (${loop})/live/init* ]; then
      for initrd in (${loop})/live/init*; do set initrd; done	  
      initrd ${initrd};	  
# Slax Based
     elif [ -e (${loop})/slax/boot/initrfs.img ]; then
        initrd (${loop})/slax/boot/initrfs.img;
# Parted Magic		
     elif [ -e (${loop})/pmagic/initrd.img ]; then
        initrd (${loop})/pmagic/initrd.img;
     elif [ -e (${loop})/boot/initrd.xz ]; then
        initrd (${loop})/boot/initrd.xz;
     elif [ -e (${loop})/boot/initrd.gz ]; then
        initrd (${loop})/boot/initrd.gz;
     elif [ -f (${loop})/boot/initrd ]; then
        initrd (${loop})/boot/initrd;
     elif [ -f (${loop})/boot/x86_64/loader/initrd ]; then
        initrd (${loop})/boot/x86_64/loader/initrd;
     elif [ -f (${loop})/boot/initramfs-x86_64.img ]; then
        initrd (${loop})/boot/initramfs-x86_64.img;
     elif [ -f (${loop})/boot/isolinux/initramfs_data64.cpio.gz ]; then 
        initrd (${loop})/boot/isolinux/initramfs_data64.cpio.gz; 	
# Isolinux initrd.gz
     elif [ -f (${loop})/isolinux/initrd.gz ]; then 
        initrd (${loop})/isolinux/initrd.gz;	
# EASUS	
     elif [ -f (${loop})/initrd.img ]; then 
        initrd (${loop})/initrd.img;	
# CentOS	
     elif [ -f (${loop})/isolinux/initrd.img ]; then         
	    initrd (${loop})/isolinux/initrd.img;  
# System Rescue	
     elif [ -f (${loop})/isolinux/initram.igz ]; then           
    	initrd (${loop})/isolinux/initram.igz;     
	 fi
}
